import sys
import os
import time
import pyrebase
from threading import Thread

sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")
import firebase_login
import unittest
	
class TestFirebase(unittest.TestCase):
	config = {
		"apiKey": "AIzaSyD6ejYW0EFDNHgTo4Ko1Alk7U4SHTv3Jz0",
		"authDomain": "drowsiness-detector.firebaseapp.com",
		"databaseURL": "https://drowsiness-detector.firebaseio.com",
		"storageBucket": "drowsiness-detector.appspot.com"
	}
	firebase = pyrebase.initialize_app(config)
	global auth
	auth = firebase.auth()
	email = "davidsun@ucsb.edu"
	password = "helloworld"
	global user
	user = auth.sign_in_with_email_and_password(email, password)
	global creationTime
	
	def refreshToken(self):
		time.sleep(600)
		global user, email, password
		user = auth.sign_in_with_email_and_password(email, password)
		refreshedUser = auth.refresh(user['refreshToken'])
		user = refreshedUser
	
	def runThread(self):
		t1 = Thread(target=self.refreshToken())
		t1.daemon = True
		t1.start()
	
	def test_parseEmail(self):
		# print("Running test parse email")
		self.assertEqual(firebase_login.parseEmail("davids0330@gmail.com"),"davids0330gmailcom")
		self.assertEqual(firebase_login.parseEmail("!@#$%^&*()"),"")
		self.assertEqual(firebase_login.parseEmail("abcdefghijklmnopqrstuvwxyz0123456789"),"abcdefghijklmnopqrstuvwxyz0123456789")
		
	def test_signIn(self):
		# print("Running test sign in")
		self.assertEqual(firebase_login.signIntoFirebase("randomemail@gmail.com","randompassword"),None)
		
	def test_logIn(self):
		# print("Running test log in")
		self.assertEquals(firebase_login.createFirebaseAccount("davids0330@gmail.com", "helloworld"), None)
	
	def test_createEyeTimeStamp(self):
		# print("Running test create eye time stamp")
		insertTime = time.time()
		self.assertEqual(firebase_login.createTimeStampEyes([insertTime],0),{"Eye 0": insertTime})
		
	def test_createYawnTimeStamp(self):
		# print("Running test create yawn time stamp")
		insertTime = time.time()
		self.assertEqual(firebase_login.createTimeStampYawn([insertTime], 0), {"Yawn 0": insertTime})
	
	def test_addUserInfo(self):
		# print("Running test add user info")
		global creationTime
		creationTime = time.time()
		self.assertEqual(firebase_login.addUserInfo("davidsun@ucsb.edu",user, "is not manager", 0.3,0.4),True)
		
	def test_getUserData(self):
		# print("Running test get user data")
		creationTime = time.time()
		self.assertEqual(firebase_login.addUserInfo("davidsun@ucsb.edu",user, "is not manager", 0.3,0.4),True)
		user_data = firebase_login.getUserData("davidsun@ucsb.edu",user)
		self.assertEqual(user_data["blink frequency"],0)
		self.assertEqual(user_data["current eye timestamp"], 0)
		self.assertEqual(user_data["current yawn timestamp"], 0)
		self.assertEqual(user_data["eye ratio"], 0.3)
		self.assertEqual(user_data["mouth ratio"], 0.4)
		self.assertEqual(user_data["tag"], "is not manager")
		self.assertEqual(user_data["username"],"davidsun@ucsb.edu")
		self.assertAlmostEqual(user_data["timestamp"]["First Created"],creationTime)

	def test_updateUserInfo(self):
		# print("Running test update user info")
		self.assertEqual(firebase_login.updateUserInfo("davidsun@ucsb.edu",user,"is manager", 0.28,0.38,22), True)
		user_data = firebase_login.getUserData("davidsun@ucsb.edu",user)
		self.assertEqual(user_data["blink frequency"],22)
		# self.assertEqual(user_data["current eye timestamp"], 1)
		# self.assertEqual(user_data["current yawn timestamp"], 0)
		self.assertEqual(user_data["eye ratio"], 0.28)
		self.assertEqual(user_data["mouth ratio"], 0.38)
		self.assertEqual(user_data["tag"], "is manager")
		self.assertEqual(user_data["username"],"davidsun@ucsb.edu")
		
	def test_updateEyeTimeStamp(self):
		# print("Running test update eye time stamp")
		eyeTimeStamp = time.time()
		# self.assertEqual(firebase_login.addUserInfo("davidsun@ucsb.edu", user, "is manager", 0.28, 0.38,),True)
		self.assertEqual(firebase_login.improvedUpdateEyeTimeStamps("davidsun@ucsb.edu",user,[eyeTimeStamp]),True)
		user_data = firebase_login.getUserData("davidsun@ucsb.edu",user)
		# self.assertEqual(user_data["blink frequency"], 0)
		# self.assertEqual(user_data["current eye timestamp"], 1)
		# self.assertEqual(user_data["current yawn timestamp"], 0)
		# self.assertEqual(user_data["eye ratio"], 0.28)
		# self.assertEqual(user_data["mouth ratio"], 0.38)
		# self.assertEqual(user_data["tag"], "is manager")
		self.assertEqual(user_data["username"], "davidsun@ucsb.edu")
		# self.assertAlmostEqual(user_data["timestamp"]["First Created"], creationTime)
		self.assertAlmostEqual(user_data["timestamp"]["Eye "+str(user_data["current eye timestamp"]-1)], eyeTimeStamp)
		

	def test_updateYawnTimeStamp(self):
		# print("Running test update yawn time stamp")
		yawnTimeStamp = time.time()
		# self.assertEqual(firebase_login.addUserInfo("davidsun@ucsb.edu", user, "is manager", 0.28, 0.38,),True)
		self.assertEqual(firebase_login.improvedUpdateYawnTimeStamps("davidsun@ucsb.edu", user, [yawnTimeStamp]),True)
		user_data = firebase_login.getUserData("davidsun@ucsb.edu", user)
		# self.assertEqual(user_data["blink frequency"], 22)
		# self.assertEqual(user_data["current eye timestamp"], 2)
		# self.assertEqual(user_data["current yawn timestamp"], 0)
		# self.assertEqual(user_data["eye ratio"], 0.28)
		# self.assertEqual(user_data["mouth ratio"], 0.38)
		# self.assertEqual(user_data["tag"], "is manager")
		self.assertEqual(user_data["username"], "davidsun@ucsb.edu")
		# self.assertAlmostEqual(user_data["timestamp"]["First Created"], creationTime)
		self.assertAlmostEqual(user_data["timestamp"]["Yawn " + str(user_data["current yawn timestamp"]-1)], yawnTimeStamp)
	
	# def test_aggresivelyTimeStamps(self):
	# 	print("Running test aggressively time stamps: This will take about a minute and twenty seconds")
	# 	for x in range(0,1000):
	# 		yawnTimeStamp = time.time()
	# 		self.assertEqual(firebase_login.updateYawnTimeStamps("davidsun@ucsb.edu", user, [yawnTimeStamp]),True)
	# 		eyeTimeStamp = time.time()
	# 		self.assertEqual(firebase_login.updateEyeTimeStamps("davidsun@ucsb.edu", user, [eyeTimeStamp]), True)
	# 		user_data = firebase_login.getUserData("davidsun@ucsb.edu", user)
	# 		self.assertAlmostEqual(user_data["timestamp"]["Eye " + str(user_data["current eye timestamp"] - 1)], eyeTimeStamp)
	# 		self.assertAlmostEqual(user_data["timestamp"]["Yawn " + str(user_data["current yawn timestamp"] - 1)],yawnTimeStamp)
			
	# def test_improvedEyeTimeStamp(self):
	# 	self.assertEqual(firebase_login.addUserInfo("improvedeyetimestamp@gmail.com", user, "is not manager", 0.3, 0.4),
	# 	                 True)
	# 	for x in range(0,2000):
	# 		eyeTimeStamp = time.time()
	# 		self.assertEqual(firebase_login.improvedUpdateEyeTimeStamps("improvedeyetimestamp@gmail.com", user, [eyeTimeStamp]), True)
	# 		user_data = firebase_login.getUserData("improvedeyetimestamp@gmail.com",user)
	# 		self.assertAlmostEqual(user_data["timestamp"]["Eye " + str(user_data["current eye timestamp"]-1)], eyeTimeStamp)
	#
	def test_improvedAggressiveTest(self):
		for x in range(0, 100):
			yawnTimeStamp = time.time()
			self.assertEqual(firebase_login.improvedUpdateYawnTimeStamps("davidsun@ucsb.edu", user, [yawnTimeStamp]),True)
			eyeTimeStamp = time.time()
			self.assertEqual(firebase_login.improvedUpdateEyeTimeStamps("davidsun@ucsb.edu", user, [eyeTimeStamp]), True)
			user_data = firebase_login.getUserData("davidsun@ucsb.edu", user)
			self.assertAlmostEqual(user_data["timestamp"]["Eye " + str(user_data["current eye timestamp"] - 1)], eyeTimeStamp)
			self.assertAlmostEqual(user_data["timestamp"]["Yawn " + str(user_data["current yawn timestamp"] - 1)],yawnTimeStamp)
	
	def test_tokenExpiration(self):
		self.runThread()
		time.sleep(3600)
		self.assertEqual(firebase_login.signIntoFirebase("davids0330@gmail.com","helloworld"),True,"Failed to connect to firebase, Token most likely expired")
		
	def test_multipleBlinkFrequencyUpdates(self):
		
		arrayUserNames = []
		for x in range(0, 20):
			arrayUserNames.append("multipleBlinkFrequencyUpdateTest" + str(x) + "@gmail.com" )
		for x in range(0,20):
			self.assertEqual(firebase_login.addUserInfo(arrayUserNames[x],user,"is not manager", 0.3,0.4), True)
		for y in range(0,100):
			for x in range(0,20):
				self.assertEqual(firebase_login.updateBlinkFrequency(arrayUserNames[x],user,y*x+y+x))
			
		
	# def test_optimizationIdea(self):
	# 	for x in range(0,200):
	# 		yawnTimeStamp = time.time()
	# 		self.assertEqual(firebase_login.updateYawnTimeStamps("davidsun@ucsb.edu", user, [yawnTimeStamp]),True)
	# 		eyeTimeStamp = time.time()
	# 		self.assertEqual(firebase_login.updateEyeTimeStamps("davidsun@ucsb.edu", user, [eyeTimeStamp]), True)
	# 		user_data = firebase_login.getUserData("davidsun@ucsb.edu", user)
	# 		self.assertAlmostEqual(user_data["timestamp"]["Eye " + str(user_data["current eye timestamp"] - 1)], eyeTimeStamp)
	# 		self.assertAlmostEqual(user_data["timestamp"]["Yawn " + str(user_data["current yawn timestamp"] - 1)],yawnTimeStamp)
	#
	# 	for x in range (0,800):
	# 		yawnTimeStamp = time.time()
	# 		self.assertEqual(firebase_login.improvedUpdateYawnTimeStamps("davidsun@ucsb.edu", user, [yawnTimeStamp]),
	# 		                 True)
	# 		eyeTimeStamp = time.time()
	# 		self.assertEqual(firebase_login.improvedUpdateEyeTimeStamps("davidsun@ucsb.edu", user, [eyeTimeStamp]),
	# 		                 True)
	# 		user_data = firebase_login.getUserData("davidsun@ucsb.edu", user)
	# 		self.assertAlmostEqual(user_data["timestamp"]["Eye " + str(user_data["current eye timestamp"] - 1)],
	# 		                       eyeTimeStamp)
	# 		self.assertAlmostEqual(user_data["timestamp"]["Yawn " + str(user_data["current yawn timestamp"] - 1)],
	# 		                       yawnTimeStamp)
			
if __name__ == '__main__':
    unittest.main()